name: smoothy

# Workflow triggers
on:
  # push:
  #   branches: [ main, master ]
  # pull_request:
  #   branches: [ main, master ]
  #   types: [ opened, reopened ]

  # Allow to run this workflow manually from the Actions tab
  workflow_dispatch:

# When a branch or a pull request receives new commit (say, fixed typo)
# we would like to cancel previous workflow run immediately.
concurrency:
  cancel-in-progress: true
  # `github.workflow` ensures we cancel in-progress runs of the SAME workflow!
  # `github.run_id`:
  #   is a fallback value which allows to avoid syntax error and
  #   is guaranteed to be both unique and defined for the run
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}

# Each job runs in a separate runner sequentially or in parallel
jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Download dependencies
        run: echo Use your favorite package manager...
      - name: Cache dependencies
        run: echo Store external packages for quick access using cache...

  audit:
    name: Verify known vulnerabilities
    needs: [ install ]
    runs-on: ubuntu-latest
    steps:
      - name: Audit with tool \#1
        run: echo Use tool \#1
      - name: Upload audit results from tool \#1
        run: echo Use Github Checks to store audit results?
      - name: Audit with tool \#2
        run: echo Use tool \#2
      - name: Upload audit results from tool \#2
        run: echo Use Github Checks to store audit results?

  lint:
    name: Verify code guidelines
    needs: [ install ]
    runs-on: ubuntu-latest
    steps:
      - name: Verify CSS files
        run: echo Run style linter...
      - name: Upload CSS verification results
        run: echo Use Github Checks to store CSS verification results?
      - name: Verify JS files
        run: echo Run JS linter...
      - name: Upload JS verification results
        run: echo Use Github Checks to store JS verification results?

  poke:
    name: Verify unit specs
    needs: [ install ]
    runs-on: ubuntu-latest
    # opportunity: split by folder, run in parallel (use matrix, how to report?)
    steps:
      - name: Verify unit specifications
        run: echo Run unit tests...
      - name: Upload test results
        run: echo Use Github Checks to store unit test results?

  pack:
    name: Pack a library
    needs: [ install, audit, lint, poke ]
    runs-on: ubuntu-latest
    steps:
      - name: Build a library
        run: echo Use your favorite builder...
      - name: Pack a library
        run: echo Use your favorite package manager...
      - name: Store a library
        run: echo Store packed library for quick access using workflow artifacts...

  compose:
    name: Compose web app
    needs: [ pack ]
    runs-on: ubuntu-latest
    steps:
      - name: Use packed library
        run: echo Craft a web application that uses packed library...
      - name: Cache web app
        run: echo Store web app for quick access using workflow artifacts...

  test:
    name: Test on ${{ matrix.device }} in ${{ matrix.browser }}
    needs: [ compose ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - browser: Chrome
            device: desktop
            # ubuntu is for debug purposes, change to windows-latest
            os: ubuntu-latest

          - browser: Edge
            device: desktop
            # ubuntu is for debug purposes, change to windows-latest
            os: ubuntu-latest

          - browser: Safari
            device: desktop
            # ubuntu is for debug purposes, change to macos-latest
            os: ubuntu-latest

          - browser: Firefox
            device: desktop
            os: ubuntu-latest

          - browser: Safari
            device: iPhone 12
            # ubuntu is for debug purposes, change to ios-latest
            os: ubuntu-latest

          - browser: Chrome
            device: Galaxy S8
            # ubuntu is for debug purposes, change to android-latest
            os: ubuntu-latest
    steps:
      - name: Run composed app
        run: echo Run web app on a local server in background...
      - name: Verify cross-browser specifications
        run: echo Run cross-browser tests...
      - name: Upload test results
        run: echo Use Github Checks to store cross-browser test results?
  
  deploy:
    name: Deploy new Salmon
    needs: [ compose ]
    runs-on: ubuntu-latest
    environment:
      name: salmon
      url: ${{ steps.deployed_webapp.outputs.page_url }}
    steps:
      - name: Deploy web app
        run: echo Deploy composed web app...
      - id: deployed_webapp
        run: echo "page_url=https://example.com/" >> "$GITHUB_OUTPUT"

  review:
    name: External review
    needs: [ deploy ]
    runs-on: ubuntu-latest
    environment:
      name: external-review
    steps:
      - run: echo Review is finished.
  
  publish:
    name: Publish the library
    needs: [ pack, review, test ]
    runs-on: ubuntu-latest
    environment:
      name: library-distribution-channel
      url: ${{ steps.published_lib.outputs.page_url }}
    steps:
      - name: Publish packed library
        run: echo Use your favorite package manager...
      - id: published_lib
        run: echo "page_url=https://example.com/" >> "$GITHUB_OUTPUT"
      - name: Send notifications?
        # opportunity: turn into a job
        run: echo New version is available!
